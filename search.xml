<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NDK开发：基本使用]]></title>
    <url>%2F2017%2F12%2F04%2FNDK%E5%BC%80%E5%8F%91%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 NDKNative Development Kit（NDK）是一系列工具的集合。它提供了一系列的工具，帮助开发者快速开发C/C++的动态库，并能自动将so和java一起打包成apk。 JNIJava Native Interface（JNI）标准是java平台的一部分，JNI是Java语言提供的Java和C/C++相互沟通的机制，Java可以通过JNI调用C/C++代码，C/C++的代码也可以调用java代码。 JNI与NDK的关系NDK可以为我们生成了C/C++的动态链接库，JNI是java和C/C++沟通的接口，两者与android没有半毛钱关系，只因为安卓是java程序语言开发，然后通过JNI又能与C/C++沟通，所以我们可以使用NDK+JNI来实现“Java+C”的开发方式。 为什么要NDK开发NDK开发具有以下优点: 项目需要调用底层的一些C/C++的一些东西（java无法直接访问到操作系统底层（如系统硬件等）），或者已经在C/C++环境下实现了功能代码（大部分现存的开源库都是用C/C++代码编写的。），直接使用即可。NDK开发常用于驱动开发、无线热点共享、数学运算、实时渲染的游戏、音视频处理、文件压缩、人脸识别、图片处理等。 为了效率更加高效些。将要求高性能的应用逻辑使用C/C++开发，从而提高应用程序的执行效率。但是C/C++代码虽然是高效的，在java与C/C++相互调用时却增大了开销。 基于安全性的考虑。防止代码被反编译，为了安全起见，使用C/C++语言来编写重要的部分以增大系统的安全性，最后生成so库（用过第三方库的应该都不陌生）便于给人提供方便。（任何有效的代码混淆对于会smail语法反编译你apk是分分钟的事，即使你加壳也不能幸免高手的攻击） 便于移植。用C/C++写得库可以方便在其他的嵌入式平台上再次使用。 安装与配置首先我们在Android Studio下新建一个安卓项目。然后打开Project Structure界面，如下：在SDK Location目录下，有SDK和NDK的路径，如果我们暂时还未下载配置过NDK，故我们需要点击Download Android NDK来进行下载（Android Studio还是很强大的，相比Eclipse能省不少事）。这里Android Studio会下载最新版本的NDK进行安装，默认会下载保存在SDK的路径下。我们在上图中还能看到有一段介绍文字，说SDK以及NDK的路径配置会保存在local.properties文件内，安装完成后我们刷新Project，进local.properties文件查看也能看到SDK与NDK的路径。12ndk.dir=F\:\\AndroidSDK\\ndk-bundlesdk.dir=F\:\\AndroidSDK NDK下载配置完成之后，需要在gradle.properties文件中加上一行：1android.useDeprecatedNdk=true 接下来，我们借助强大的Android Studio的插件功能，在External Tools下配置两个非常有用的插件。进入Settings–&gt;Tools–&gt;ExternalTools，点击+号增加。 javah -jni命令，是根据java文件生成.h头文件的，会自动根据java文件中的类名（包含包名）与方法名生成对应的C/C++里面的方法名。下面是参数配置及其含义： Program: $JDKPath$\bin\javah.exe 这里配置的是JDK目录下的javah.exe的路径。 Parametes: -classpath . -jni -d $ModuleFileDir$/src/main/jni $FileClass$ 这里$FileClass$指的是要执行操作的类名（即我们操作的文件），$ModuleFileDir$/src/main/jni表示生成的文件保存在这个module目录的src/main/jni目录下。 Working: $ModuleFileDir$\src\main\java module目录下的src\main\java目录（不是很理解）。使用方式：选中java文件—&gt;右键—&gt;External Tools—&gt;javah-jni，将生成jni文件夹以及文件夹下的 包名.类名的.h头文件 （名字过长，我们可以自己重命名）。ndk -build命令，是根据C/C++文件生成so文件的。下面是参数配置及其含义： Program: F:\apk\sdk\ndk-bundle\ndk-build.cmd 这里配置的是ndk下的ndk-build.cmd的路径（根据实际情况填写）。 Working: $ModuleFileDir$\src\main\使用方式：选中C/C++文件—&gt;右键—&gt;ExternalTools—&gt;ndk-build，将在main文件夹下生成libs文件夹以及多个so文件，我们可以移动至jniLibs目录下去。 简单实例接下来我们创建一个访问本地C/C++方法的java类。12345678910111213141516public class JniTest &#123; /** * 将用C++代码实现，在android代码中调用的方法：获取当前app的包名 * @param o * @return */ public static native String getPackname(Object o); /** * 加载so库或jni库，在使用到该库之前加载就行，不一定非要写在这个类内 * 系统自己会判断扩展名是dll还是so,这里加载libJNI_ANDROID_TEST.so */ static &#123; System.loadLibrary("JNI_ANDROID_TEST"); &#125;&#125; 注意JNI_ANDROIDTEST这个Library名字，之后还会需要用到，要保持一致。该类提供了一个static的native方法，该方法将用来获取app的包名。然后对该文件执行javah -jni操作，生成对应的.h头文件。如图，已经根据我们的java类生成了对应的.h文件，文件名为包名类名.h，我们可以手动改名为jnitest.h，里面只有一个方法，返回值为String（jstring），方法名为Java类的包名类名方法名（包名中的分级不是用.而是），前面两个参数是C++里面必须有的（JNIEnv代表指向JVM的指针，jclass是调用该方法的java对象），第三个就是我们java类的方法里面的参数Object。注意，这是java函数与C++函数对应的静态注册方法，即通过特定的规则来写，此处方法名可以随意起名字，然后还可以用动态注册的方式关联两个方法（显然，静态注册要简单一些）。然后我们新建一个C++文件，取名为jnitest.cpp，写上需要include的文件，从.h文件中复制方法过来（方法名、参数类型、返回值等必须一致！血与泪的教训）。至此，.h文件和c++文件均已完成，接下来还需要在这个jni目录下增加两个文件，Android.mk和Application.mk。Android.mk，注意LOCAL_MODULE的值与之前的名字相对应，LOCAL_SRC_FILES的值写c++文件的名字，这两个值成对设置，可设置多组。（:=是赋值的意思，$是引用某变量的值。）1234567891011121314# 设置当前的编译目录（Android.mk所在的目录）LOCAL_PATH := $(call my-dir)# 清除LOCAL_XX变量（LOCAL_PATH除外）include $(CLEAR_VARS)# 指定当前编译模块的名称LOCAL_MODULE := JNI_ANDROID_TEST# 编译模块需要的源文件LOCAL_SRC_FILES := jnitest.cpp# 指定编译出的库类型，BUILD_SHARED_LIBRARY：动态库；BUILD_STATIC_LIBRARY：静态库， BUILD_EXECUTEABLE指：可执行文件include $(BUILD_SHARED_LIBRARY) 在一个Android.mk文件中配置多个Module的方式如下（include$(CLEAR_VARS)、include $(BUILD_SHARED_LIBRARY)两个语句也需要加上）：1234567891011LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE := JNI_STATIC_ANDROID_TESTLOCAL_SRC_FILES := jnistaticutils.cppinclude $(BUILD_SHARED_LIBRARY)include $(CLEAR_VARS)LOCAL_MODULE := JNI_DYNAMIC_ANDROID_TESTLOCAL_SRC_FILES := jnidynamicutils.cppinclude $(BUILD_SHARED_LIBRARY) Application.mk，APP_ABI有四种类型（默认armeabi），armeabi、armeabi-v7a、x86、mips，设置时以空格隔开，all表示所有。该文件中有个可选配置的APP_MODULES，类似于上面Android.mk文件中的LOCAL_MODULE，以空格隔开，且会覆盖掉Android.mk文件中的LOCAL_MODULE设置（比如Android.mk文件中的写了两个jni库的配置，LOCAL_MODULE := JNI1、LOCAL_MODULE := JNI2，而Application.mk中设置的APP_MODULES := JNI1，则只能生成JNI1的so文件，要生成JNI2的so文件的时候会报错，除非写成APP_MODULES := JNI1 JNI2，这里我们直接省略默认使用Android.mk中的）。APP_ABI := all接下来我们需要对C++文件执行ndk-build操作，生成相应的so文件。如图，在main/libs目录下生成了多个so文件，名字为lib+我们指定的库名（同时还生成了obj文件夹，不知是什么东西）。这时候我们可以在main目录下新建jniLibs文件夹，把生成的libs文件夹内的东西均复制过去，删除新生成的jni、libs、obj三个文件夹。然后在Activity中测试调用，在TextView上显示我们通过C++代码实现的方法getPackname获取app的包名了。123456789public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView tv = (TextView) findViewById(R.id.tv_app_package_name); tv.setText("packageName: " + JniTest.getPackname(MainActivity.this)); &#125;&#125; 测试能正确得到包名，说明调用成功了。我们可以把JniTest类以及so文件给别人去使用，这样别人是看不到我们的代码实现的，能很好的保护我们的源码。 如果你也遇到这样的问题来我们仔细看下Log，大概意思就是说： android.useDeprecatedNdk不再支持了 让使用CMake or ndk-build 然后还有链接 考虑使用CMake或ndk构建集成。要了解更多信息，请访问:https://d.android.com/r/studio-ui/add-native-code.html#ndkCompile首先，您可以使用Android的ndk构建脚本示例插件为您生成:/Users/apple/Desktop/AndroidJNITest/app/build/intermediates/ndk/debug/Android.mk或者，你可以使用实验插件:https://developer.android.com/r/tools/experimental-plugin.html继续使用已弃用的NDK编译60天，设置在gradle.propertiesandroid.deprecatedNdkCompileLease = 1512283120054(这个测试不起作用) 经过各种查资料，发现原来在gradle3.0以上以前这种方法不在支持学习过程就不详细描述了，直接上结果：先通过SDKManager下载：CMake和LLDB在build.gradle的defaultConfig节点下加入：12345678// 使用Cmake工具 externalNativeBuild &#123; cmake &#123; cppFlags &quot;&quot; //生成多个版本的so文件 abiFilters &apos;arm64-v8a&apos;,&apos;armeabi-v7a&apos;,&apos;x86&apos;,&apos;x86_64&apos; &#125; &#125; 在build.gradle的android节点下加入：123456// 配置CMakeLists.txt路径externalNativeBuild &#123; cmake &#123; path &quot;CMakeLists.txt&quot; // 设置所要编写的c源码位置，以及编译后so文件的名字 &#125;&#125; 添加CMakeLists.txt文件到build.gradle文件同级目录下，具体内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.#CMakeLists.txtcmake_minimum_required(VERSION 3.4.1)# Creates and names a library, sets it as either STATIC# or SHARED, and provides the relative paths to its source code.# You can define multiple libraries, and CMake builds them for you.# Gradle automatically packages shared libraries with your APK.add_library( # Sets the name of the library. # 设置so文件名称. JNI_ANDROID_TEST # Sets the library as a shared library. SHARED # 设置这个so文件为共享. # Provides a relative path to your source file(s). # 设置这个so文件为共享. src/main/jni/jnitest.cpp)# Searches for a specified prebuilt library and stores the path as a# variable. Because CMake includes system libraries in the search path by# default, you only need to specify the name of the public NDK library# you want to add. CMake verifies that the library exists before# completing its build.find_library( # Sets the name of the path variable. log-lib # Specifies the name of the NDK library that # you want CMake to locate. log )# Specifies libraries CMake should link to your target library. You# can link multiple libraries, such as libraries you define in this# build script, prebuilt third-party libraries, or system libraries.target_link_libraries( # Specifies the target library. # 制定目标库. JNI_ANDROID_TEST # Links the target library to the log library # included in the NDK. $&#123;log-lib&#125; ) 最后修改CMakeLists.txt中以下圈出部分就能解决了： 参考文章：详解AndroidStudio JNI +Gradle3.0以上JNI爬坑之旅NDK开发 从入门到放弃(一：基本流程入门了解)]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkdownPad激活]]></title>
    <url>%2F2017%2F11%2F24%2FMarkdownPad%E6%BF%80%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[Windows平台推荐使用的Markdown编辑器：MarkdownPad MarkdownPad2.5版激活方法 邮箱：Soar360@live.com 授权秘钥：1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== MarkdownPad2.4版激活方法备份的百度网盘链接: https://pan.baidu.com/s/1dEBpuDj密码: p4d3]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>MarkdownPad</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown进阶语法]]></title>
    <url>%2F2017%2F11%2F24%2FMarkdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Note:以下内容可能在部分编辑器中没有效果，这里展示的只是在Cmd Markdown 编辑阅读器中的编写方式。为了兼容不能正确显示的平台部分效果用了截图。 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签：1234categories:- Markdowntags:- Markdown 删除线使用 ~~ 表示删除线。~~这是一段错误的文本。~~这是一段错误的文本。 注脚使用[^keyword]表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 效果： LaTeX 公式$ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。1234567$$ 表示整行公式：$$\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$ 访问 MathJax 参考更多使用方法。 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： 1$ sudo apt-get install vim-gnome Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 流程图示例12345678910st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考序列图示例 1123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 示例 212345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考Mermaid 流程图1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考Mermaid 序列图1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考表格支持其中:标识了对齐方式12345| 项目 | 价格 | 数量 || -------- | -----: | :----: || 计算机 | $1600 | 5 || 手机 | $12 | 12 || 管线 | $1 | 234 | 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 定义型列表名词 1: 定义 1（左侧有一个可见的冒号和四个不可见的空格） 代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 内嵌图标本站的图标系统对外开放，在文档中输入 &lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt; 即显示微博的图标： 替换 上述 i 标签 内的 icon-weibo 以显示不同的图标，例如： &lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt; 即显示人人的图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 待办事宜 Todo 列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票 [^footnote]: 这是一个 注脚 的 文本。 [^footnote2]: 这是另一个 注脚 的 文本。 参考链接:Markdown进阶语法整理Cmd Markdown 简明语法手册、高阶语法手册]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简明示例]]></title>
    <url>%2F2017%2F11%2F24%2FMarkdown%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[Note:这里罗列了Markdown的语法代码，简单粗暴so… shut up and show me the code! 段落、标题、引用123456789101112131415161718A First Level Header===A Second Level Header---Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.The quick brown fox jumped over the lazydog&apos;s back.### Header 3&gt; This is a blockquote.&gt; &gt; This is the second paragraph in the blockquote.&gt;&gt; ## This is an H2 in a blockquote 效果:由于目录显示问题就不展示了 修辞和强调1234Some of these words *are emphasized*. Some of these words _are emphasized also_. Use two asterisks for **strong emphasis**. Or, if you prefer, __use two underscores instead__. 效果:Some of these words are emphasized.Some of these words are emphasized also.Use two asterisks for strong emphasis.Or, if you prefer, use two underscores instead. 列表1234567891011* Candy.* Gum.* Booze.+ Candy.+ Gum.+ Booze.- Candy.- Gum.- Booze. 效果: Candy. Gum. Booze. 12341. Red2. Green3. Blue5. 序号标错了也没关系 效果: Red Green Blue 序号标错了也没关系 1234* A list item.With multiple paragraphs.插入空行* Another item in the list. A list item.With multiple paragraphs.插入空行 Another item in the list. 链接12This is an [example link](http://example.com/).This is an [example link](http://example.com/ &quot;With a Title&quot;). 效果:This is an example link.This is an example link.1234567891011I get 10 times more traffic from [Google][1] than from[Yahoo][2] or [MSN][3].[1]: http://google.com/ &quot;Google&quot;[2]: http://search.yahoo.com/ &quot;Yahoo Search&quot;[3]: http://search.msn.com/ &quot;MSN Search&quot;I start my morning with a cup of coffee and[The New York Times][NY Times].[ny times]: http://www.nytimes.com/ 效果：I get 10 times more traffic from Google than fromYahoo or MSN. I start my morning with a cup of coffee andThe New York Times. 图片1![alt text](http://ozv0hqacp.bkt.clouddn.com/17-11-24/9262387.jpg &quot;Title&quot;) 效果: 代码123I strongly recommend against using any `&lt;blink&gt;` tags. I wish SmartyPants used named entities like `&amp;mdash;`instead of decimal-encoded entites like `&amp;#8212;`. 效果:I strongly recommend against using any &lt;blink&gt; tags.I wish SmartyPants used named entities like &amp;mdash;instead of decimal-encoded entites like &amp;#8212;.123456If you want your page to validate under XHTML 1.0 Strict,you&apos;ve got to put paragraph tags in your blockquotes:&lt;blockquote&gt;&lt;p&gt;For example.&lt;/p&gt;&lt;/blockquote&gt; 效果:If you want your page to validate under XHTML 1.0 Strict,you’ve got to put paragraph tags in your blockquotes: For example. 在3个` 后加入java、javascript、cpp、python或其他语言会代码高亮 12345678910import android.support.v7.app.AppCompatActivity;import android.os.Bundle;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125;&#125; Html锚点页内跳转实际语法比较简单，在需要跳转的位置添加锚点，语法如下：&lt;span id=&quot;jump&quot;&gt;跳转到的地方&lt;/span&gt; 在需要点击跳转的位置，使用上面的id，格式类似超链接的形式：[点击跳转](#jump) 这样就实现了上述功能。 参考链接：Markdown: Basics （快速入门）Markdown 语法说明 (简体中文版)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2013%2F07%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>test</tag>
      </tags>
  </entry>
</search>
